
import 'dart:async';
import 'dart:typed_data';

import 'package:convert/convert.dart' as convert;
import "package:test/test.dart";
import 'package:typed_data/typed_buffers.dart';

import "package:librsync/librsync.dart";
import "../lib/src/signature_lookup.dart";

final everyTwoRegex = new RegExp(r".{2}");
String hexEncode(List<int> input) {
  return convert.hex.encode(input).replaceAllMapped(everyTwoRegex, (match) => match.group(0) + " ");
}

main() {
  test("Small signature", () async {
    final oldFile = new Uint8List(7);
    oldFile.setAll(0, [
      // "Red car"
      0x52, 0x65, 0x64, 0x20, 0x63, 0x61, 0x72
    ]);
    final sig = await calculateSignature((() async* { yield oldFile; })(),
        blockSize: 2, strongSumSize: 8).fold(new Uint8Buffer(), (acc, chunk) => acc..addAll(chunk));
    final sigStr = hexEncode(sig);
    expect(sigStr, equals(hexEncode([
      // Copied from rdiff's output.
      0x72, 0x73, 0x01, 0x37, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, // header
      0x01, 0x66, 0x00, 0xF5, 0xAF, 0x6B, 0x83, 0x63, 0xC7, 0x6D, 0x47, 0x51, // block 0
      0x01, 0x45, 0x00, 0xC2, 0x84, 0x10, 0xCD, 0x9D, 0xB3, 0x5F, 0x5F, 0x04, // block 1
      0x01, 0x84, 0x01, 0x02, 0xE4, 0xCF, 0x4F, 0xC9, 0xCE, 0xB1, 0x3D, 0xB0, // block 2
      0x00, 0x91, 0x00, 0x91, 0xCE, 0xA4, 0x07, 0xCA, 0x10, 0x6D, 0xCF, 0x64, // block 3
    ])));
  });

  test("Signature lookup", () async {
    final sigFile = new Uint8List(60);
    sigFile.setAll(0, [
      // Copied from the test above.
      0x72, 0x73, 0x01, 0x37, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, // header
      0x01, 0x66, 0x00, 0xF5, 0xAF, 0x6B, 0x83, 0x63, 0xC7, 0x6D, 0x47, 0x51, // block 0
      0x01, 0x45, 0x00, 0xC2, 0x84, 0x10, 0xCD, 0x9D, 0xB3, 0x5F, 0x5F, 0x04, // block 1
      0x01, 0x84, 0x01, 0x02, 0xE4, 0xCF, 0x4F, 0xC9, 0xCE, 0xB1, 0x3D, 0xB0, // block 2
      0x00, 0x91, 0x00, 0x91, 0xCE, 0xA4, 0x07, 0xCA, 0x10, 0x6D, 0xCF, 0x64, // block 3
    ]);
    final sigLookup = await SignatureLookup.load((() async* { yield sigFile; })());

    final blocks0 = sigLookup.getBlocks(0x016600F5);
    expect(blocks0, isNotNull);
    expect(blocks0.length, equals(1));
    expect(hexEncode(blocks0[0].strongSum), equals(hexEncode([
      0xAF, 0x6B, 0x83, 0x63, 0xC7, 0x6D, 0x47, 0x51
    ])));

    final blocks3 = sigLookup.getBlocks(0x00910091);
    expect(blocks3, isNotNull);
    expect(blocks3.length, equals(1));
    expect(hexEncode(blocks3[0].strongSum), equals(hexEncode([
      0xCE, 0xA4, 0x07, 0xCA, 0x10, 0x6D, 0xCF, 0x64
    ])));
  });
}
